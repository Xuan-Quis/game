<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/tutorial/androidgametutorial/gamestates/WinScreen.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/tutorial/androidgametutorial/gamestates/WinScreen.java" />
              <option name="originalContent" value="package com.tutorial.androidgametutorial.gamestates;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import android.graphics.Canvas;&#10;import android.graphics.Color;&#10;import android.graphics.Paint;&#10;import android.graphics.RectF;&#10;import android.view.MotionEvent;&#10;&#10;import com.tutorial.androidgametutorial.helpers.LeaderboardManager;&#10;import com.tutorial.androidgametutorial.helpers.interfaces.GameStateInterface;&#10;import com.tutorial.androidgametutorial.main.Game;&#10;import com.tutorial.androidgametutorial.ui.CustomButton;&#10;&#10;import static com.tutorial.androidgametutorial.main.MainActivity.GAME_HEIGHT;&#10;import static com.tutorial.androidgametutorial.main.MainActivity.GAME_WIDTH;&#10;&#10;public class WinScreen extends BaseState implements GameStateInterface {&#10;&#10;    private CustomButton playAgainButton, menuButton, leaderboardButton;&#10;    private Paint titlePaint, statsPaint, buttonPaint;&#10;    private int killCount = 0;&#10;    private int bestKillCount = 0;&#10;    private SharedPreferences sharedPrefs;&#10;    private LeaderboardManager leaderboardManager;&#10;    private boolean isNewRecord = false;&#10;&#10;    public WinScreen(Game game) {&#10;        super(game);&#10;        initButtons();&#10;        initPaints();&#10;&#10;        // Khởi tạo SharedPreferences để lưu kỷ lục (tương thích ngược)&#10;        sharedPrefs = game.getContext().getSharedPreferences(&quot;GameStats&quot;, Context.MODE_PRIVATE);&#10;        bestKillCount = sharedPrefs.getInt(&quot;bestKillCount&quot;, 0);&#10;&#10;        // Khởi tạo LeaderboardManager&#10;        leaderboardManager = new LeaderboardManager(game.getContext());&#10;    }&#10;&#10;    private void initButtons() {&#10;        float buttonWidth = 200;&#10;        float buttonHeight = 80;&#10;        float centerX = GAME_WIDTH / 2f;&#10;        float centerY = GAME_HEIGHT / 2f;&#10;&#10;        playAgainButton = new CustomButton(centerX - buttonWidth / 2, centerY + 100, buttonWidth, buttonHeight);&#10;        menuButton = new CustomButton(centerX - buttonWidth / 2, centerY + 200, buttonWidth, buttonHeight);&#10;        leaderboardButton = new CustomButton(centerX - buttonWidth / 2, centerY + 300, buttonWidth, buttonHeight);&#10;    }&#10;&#10;    private void initPaints() {&#10;        titlePaint = new Paint();&#10;        titlePaint.setColor(Color.YELLOW);&#10;        titlePaint.setTextSize(80);&#10;        titlePaint.setFakeBoldText(true);&#10;        titlePaint.setTextAlign(Paint.Align.CENTER);&#10;&#10;        statsPaint = new Paint();&#10;        statsPaint.setColor(Color.WHITE);&#10;        statsPaint.setTextSize(40);&#10;        statsPaint.setFakeBoldText(true);&#10;        statsPaint.setTextAlign(Paint.Align.CENTER);&#10;&#10;        buttonPaint = new Paint();&#10;        buttonPaint.setColor(Color.GREEN);&#10;        buttonPaint.setStyle(Paint.Style.FILL);&#10;    }&#10;&#10;    @Override&#10;    public void update(double delta) {&#10;        // Victory screen doesn't need update logic&#10;    }&#10;&#10;    @Override&#10;    public void render(Canvas c) {&#10;        // Draw background&#10;        c.drawColor(Color.BLACK);&#10;&#10;        // Draw victory title với hiệu ứng kỷ lục mới&#10;        if (isNewRecord) {&#10;            Paint newRecordPaint = new Paint();&#10;            newRecordPaint.setColor(Color.rgb(255, 215, 0)); // Gold color&#10;            newRecordPaint.setTextSize(90);&#10;            newRecordPaint.setFakeBoldText(true);&#10;            newRecordPaint.setTextAlign(Paint.Align.CENTER);&#10;            c.drawText(&quot; KỶ LỤC MỚI! &quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f - 200, newRecordPaint);&#10;        }&#10;&#10;        c.drawText(&quot; CHIẾN THẮNG! &quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f - 150, titlePaint);&#10;&#10;        // Draw stats&#10;        c.drawText(&quot;Bạn đã sống sót 20 giây!&quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f - 80, statsPaint);&#10;        c.drawText(&quot;Lần này: &quot; + killCount + &quot; quái bị tiêu diệt&quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f - 30, statsPaint);&#10;&#10;        // Hiển thị kỷ lục cao nhất&#10;        Paint recordPaint = new Paint();&#10;        recordPaint.setColor(Color.YELLOW);&#10;        recordPaint.setTextSize(35);&#10;        recordPaint.setFakeBoldText(true);&#10;        recordPaint.setTextAlign(Paint.Align.CENTER);&#10;        c.drawText(&quot; KỶ LỤC CÁ NHÂN: &quot; + leaderboardManager.getBestScore() + &quot; quái&quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f + 20, recordPaint);&#10;&#10;        // Draw buttons&#10;        drawButton(c, playAgainButton, &quot;CHƠI LẠI&quot;, Color.GREEN);&#10;        drawButton(c, menuButton, &quot;MENU CHÍNH&quot;, Color.BLUE);&#10;        drawButton(c, leaderboardButton, &quot;BẢNG XẾP HẠNG&quot;, Color.MAGENTA);&#10;    }&#10;&#10;    private void drawButton(Canvas c, CustomButton button, String text, int color) {&#10;        RectF buttonRect = button.getHitbox();&#10;&#10;        // Draw button background&#10;        Paint bgPaint = new Paint();&#10;        bgPaint.setColor(color);&#10;        bgPaint.setStyle(Paint.Style.FILL);&#10;        c.drawRect(buttonRect, bgPaint);&#10;&#10;        // Draw button border&#10;        Paint borderPaint = new Paint();&#10;        borderPaint.setColor(Color.WHITE);&#10;        borderPaint.setStyle(Paint.Style.STROKE);&#10;        borderPaint.setStrokeWidth(3);&#10;        c.drawRect(buttonRect, borderPaint);&#10;&#10;        // Draw button text&#10;        Paint textPaint = new Paint();&#10;        textPaint.setColor(Color.BLACK);&#10;        textPaint.setTextSize(30);&#10;        textPaint.setFakeBoldText(true);&#10;        textPaint.setTextAlign(Paint.Align.CENTER);&#10;&#10;        float textX = buttonRect.centerX();&#10;        float textY = buttonRect.centerY() + 10; // Offset for better centering&#10;        c.drawText(text, textX, textY, textPaint);&#10;    }&#10;&#10;    @Override&#10;    public void touchEvents(MotionEvent event) {&#10;        if (event.getAction() == MotionEvent.ACTION_DOWN) {&#10;            if (playAgainButton.getHitbox().contains(event.getX(), event.getY())) {&#10;                // Reset game and start playing again&#10;                game.getPlaying().resetGame();&#10;                game.setCurrentGameState(Game.GameState.PLAYING);&#10;            } else if (menuButton.getHitbox().contains(event.getX(), event.getY())) {&#10;                // Go back to main menu&#10;                game.setCurrentGameState(Game.GameState.MENU);&#10;            } else if (leaderboardButton.getHitbox().contains(event.getX(), event.getY())) {&#10;                // Go to leaderboard screen&#10;                game.getLeaderboardScreen().updateLeaderboard();&#10;                game.setCurrentGameState(Game.GameState.LEADERBOARD);&#10;            }&#10;        }&#10;    }&#10;&#10;    public void setKillCount(int killCount) {&#10;        this.killCount = killCount;&#10;&#10;        // Kiểm tra xem có phải kỷ lục mới không&#10;        isNewRecord = leaderboardManager.isNewRecord(killCount);&#10;&#10;        // Thêm điểm số mới vào leaderboard&#10;        leaderboardManager.addScore(killCount);&#10;&#10;        // Cập nhật kỷ lục cao nhất nếu cần (tương thích ngược)&#10;        if (killCount &gt; bestKillCount) {&#10;            bestKillCount = killCount;&#10;            SharedPreferences.Editor editor = sharedPrefs.edit();&#10;            editor.putInt(&quot;bestKillCount&quot;, bestKillCount);&#10;            editor.apply();&#10;            System.out.println(&quot; KỶ LỤC MỚI! &quot; + bestKillCount + &quot; quái bị tiêu diệt!&quot;);&#10;        }&#10;    }&#10;&#10;    public int getKillCount() {&#10;        return killCount;&#10;    }&#10;&#10;    public int getBestKillCount() {&#10;        return leaderboardManager.getBestScore();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.tutorial.androidgametutorial.gamestates;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;import android.graphics.Canvas;&#10;import android.graphics.Color;&#10;import android.graphics.Paint;&#10;import android.graphics.RectF;&#10;import android.view.MotionEvent;&#10;&#10;import com.tutorial.androidgametutorial.helpers.LeaderboardManager;&#10;import com.tutorial.androidgametutorial.helpers.interfaces.GameStateInterface;&#10;import com.tutorial.androidgametutorial.main.Game;&#10;import com.tutorial.androidgametutorial.ui.CustomButton;&#10;&#10;import static com.tutorial.androidgametutorial.main.MainActivity.GAME_HEIGHT;&#10;import static com.tutorial.androidgametutorial.main.MainActivity.GAME_WIDTH;&#10;&#10;public class WinScreen extends BaseState implements GameStateInterface {&#10;&#10;    private CustomButton playAgainButton, menuButton, leaderboardButton;&#10;    private Paint titlePaint, statsPaint, buttonPaint;&#10;    private int killCount = 0;&#10;    private int bestKillCount = 0;&#10;    private SharedPreferences sharedPrefs;&#10;    private LeaderboardManager leaderboardManager;&#10;    private boolean isNewRecord = false;&#10;&#10;    public WinScreen(Game game) {&#10;        super(game);&#10;        initButtons();&#10;        initPaints();&#10;&#10;        // Khởi tạo SharedPreferences để lưu kỷ lục (tương thích ngược)&#10;        sharedPrefs = game.getContext().getSharedPreferences(&quot;GameStats&quot;, Context.MODE_PRIVATE);&#10;        bestKillCount = sharedPrefs.getInt(&quot;bestKillCount&quot;, 0);&#10;&#10;        // Khởi tạo LeaderboardManager&#10;        leaderboardManager = new LeaderboardManager(game.getContext());&#10;    }&#10;&#10;    private void initButtons() {&#10;        float buttonWidth = 200;&#10;        float buttonHeight = 80;&#10;        float centerX = GAME_WIDTH / 2f;&#10;        float centerY = GAME_HEIGHT / 2f;&#10;&#10;        playAgainButton = new CustomButton(centerX - buttonWidth / 2, centerY + 100, buttonWidth, buttonHeight);&#10;        menuButton = new CustomButton(centerX - buttonWidth / 2, centerY + 200, buttonWidth, buttonHeight);&#10;        leaderboardButton = new CustomButton(centerX - buttonWidth / 2, centerY + 300, buttonWidth, buttonHeight);&#10;    }&#10;&#10;    private void initPaints() {&#10;        titlePaint = new Paint();&#10;        titlePaint.setColor(Color.YELLOW);&#10;        titlePaint.setTextSize(80);&#10;        titlePaint.setFakeBoldText(true);&#10;        titlePaint.setTextAlign(Paint.Align.CENTER);&#10;&#10;        statsPaint = new Paint();&#10;        statsPaint.setColor(Color.WHITE);&#10;        statsPaint.setTextSize(40);&#10;        statsPaint.setFakeBoldText(true);&#10;        statsPaint.setTextAlign(Paint.Align.CENTER);&#10;&#10;        buttonPaint = new Paint();&#10;        buttonPaint.setColor(Color.GREEN);&#10;        buttonPaint.setStyle(Paint.Style.FILL);&#10;    }&#10;&#10;    @Override&#10;    public void update(double delta) {&#10;        // Victory screen doesn't need update logic&#10;    }&#10;&#10;    @Override&#10;    public void render(Canvas c) {&#10;        // Draw background&#10;        c.drawColor(Color.BLACK);&#10;&#10;        // Draw victory title với hiệu ứng kỷ lục mới&#10;        if (isNewRecord) {&#10;            Paint newRecordPaint = new Paint();&#10;            newRecordPaint.setColor(Color.rgb(255, 215, 0)); // Gold color&#10;            newRecordPaint.setTextSize(90);&#10;            newRecordPaint.setFakeBoldText(true);&#10;            newRecordPaint.setTextAlign(Paint.Align.CENTER);&#10;            c.drawText(&quot; KỶ LỤC MỚI! &quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f - 200, newRecordPaint);&#10;        }&#10;        &#10;        c.drawText(&quot; CHIẾN THẮNG! &quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f - 150, titlePaint);&#10;&#10;        // Draw stats&#10;        c.drawText(&quot;Bạn đã sống sót 20 giây!&quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f - 80, statsPaint);&#10;        c.drawText(&quot;Lần này: &quot; + killCount + &quot; quái bị tiêu diệt&quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f - 30, statsPaint);&#10;&#10;        // Hiển thị kỷ lục cao nhất - sử dụng giá trị trực tiếp từ LeaderboardManager&#10;        Paint recordPaint = new Paint();&#10;        recordPaint.setColor(Color.YELLOW);&#10;        recordPaint.setTextSize(35);&#10;        recordPaint.setFakeBoldText(true);&#10;        recordPaint.setTextAlign(Paint.Align.CENTER);&#10;        &#10;        int bestScore = leaderboardManager.getBestScore();&#10;        c.drawText(&quot; KỶ LỤC CÁ NHÂN: &quot; + bestScore + &quot; quái&quot;, GAME_WIDTH / 2f, GAME_HEIGHT / 2f + 20, recordPaint);&#10;        &#10;        // Debug info (có thể bỏ sau khi test xong)&#10;        Paint debugPaint = new Paint();&#10;        debugPaint.setColor(Color.CYAN);&#10;        debugPaint.setTextSize(20);&#10;        debugPaint.setTextAlign(Paint.Align.LEFT);&#10;        c.drawText(&quot;Debug: killCount=&quot; + killCount + &quot;, bestScore=&quot; + bestScore, 50, 50, debugPaint);&#10;&#10;        // Draw buttons&#10;        drawButton(c, playAgainButton, &quot;CHƠI LẠI&quot;, Color.GREEN);&#10;        drawButton(c, menuButton, &quot;MENU CHÍNH&quot;, Color.BLUE);&#10;        drawButton(c, leaderboardButton, &quot;BẢNG XẾP HẠNG&quot;, Color.MAGENTA);&#10;    }&#10;&#10;    private void drawButton(Canvas c, CustomButton button, String text, int color) {&#10;        RectF buttonRect = button.getHitbox();&#10;&#10;        // Draw button background&#10;        Paint bgPaint = new Paint();&#10;        bgPaint.setColor(color);&#10;        bgPaint.setStyle(Paint.Style.FILL);&#10;        c.drawRect(buttonRect, bgPaint);&#10;&#10;        // Draw button border&#10;        Paint borderPaint = new Paint();&#10;        borderPaint.setColor(Color.WHITE);&#10;        borderPaint.setStyle(Paint.Style.STROKE);&#10;        borderPaint.setStrokeWidth(3);&#10;        c.drawRect(buttonRect, borderPaint);&#10;&#10;        // Draw button text&#10;        Paint textPaint = new Paint();&#10;        textPaint.setColor(Color.BLACK);&#10;        textPaint.setTextSize(30);&#10;        textPaint.setFakeBoldText(true);&#10;        textPaint.setTextAlign(Paint.Align.CENTER);&#10;&#10;        float textX = buttonRect.centerX();&#10;        float textY = buttonRect.centerY() + 10; // Offset for better centering&#10;        c.drawText(text, textX, textY, textPaint);&#10;    }&#10;&#10;    @Override&#10;    public void touchEvents(MotionEvent event) {&#10;        if (event.getAction() == MotionEvent.ACTION_DOWN) {&#10;            if (playAgainButton.getHitbox().contains(event.getX(), event.getY())) {&#10;                // Reset game and start playing again&#10;                game.getPlaying().resetGame();&#10;                game.setCurrentGameState(Game.GameState.PLAYING);&#10;            } else if (menuButton.getHitbox().contains(event.getX(), event.getY())) {&#10;                // Go back to main menu&#10;                game.setCurrentGameState(Game.GameState.MENU);&#10;            } else if (leaderboardButton.getHitbox().contains(event.getX(), event.getY())) {&#10;                // Go to leaderboard screen&#10;                game.getLeaderboardScreen().updateLeaderboard();&#10;                game.setCurrentGameState(Game.GameState.LEADERBOARD);&#10;            }&#10;        }&#10;    }&#10;&#10;    public void setKillCount(int killCount) {&#10;        this.killCount = killCount;&#10;&#10;        // Debug để kiểm tra giá trị&#10;        System.out.println(&quot; WinScreen: Nhận killCount = &quot; + killCount);&#10;&#10;        // Kiểm tra xem có phải kỷ lục mới không&#10;        isNewRecord = leaderboardManager.isNewRecord(killCount);&#10;&#10;        // Thêm điểm số mới vào leaderboard&#10;        leaderboardManager.addScore(killCount);&#10;&#10;        // Cập nhật kỷ lục cao nhất nếu cần (tương thích ngược)&#10;        if (killCount &gt; bestKillCount) {&#10;            bestKillCount = killCount;&#10;            SharedPreferences.Editor editor = sharedPrefs.edit();&#10;            editor.putInt(&quot;bestKillCount&quot;, bestKillCount);&#10;            editor.apply();&#10;            System.out.println(&quot; KỶ LỤC MỚI! &quot; + bestKillCount + &quot; quái bị tiêu diệt!&quot;);&#10;        }&#10;&#10;        System.out.println(&quot; WinScreen: Đã lưu killCount = &quot; + this.killCount + &quot;, isNewRecord = &quot; + isNewRecord);&#10;    }&#10;&#10;    public int getKillCount() {&#10;        return killCount;&#10;    }&#10;&#10;    public int getBestKillCount() {&#10;        return leaderboardManager.getBestScore();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>